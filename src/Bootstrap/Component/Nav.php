<?php

namespace Bpstr\Components\Bootstrap\Component;


use Bpstr\Components\Bootstrap;
use Bpstr\Components\Bootstrap\Behaviour\NestedComponent;
use Bpstr\Elements\Base\ElementInterface;
use Bpstr\Elements\Html\Anchor;
use Bpstr\Elements\Html\Element;

/**
 * Navs class for Bootstrap components.
 * Source: https://getbootstrap.com/docs/4.1/components/alerts/
 *
 * @bpstr Project Lifera <dev@lifera.hu>
 */
class Nav extends NestedComponent {
	const NAV_TABS  = 'nav-tabs';
	const NAV_PILLS = 'nav-pills';

	const NAV_ITEM = 'nav-item';
	const NAV_LINK = 'nav-link';

	public $tag = 'nav';
	public $family = 'nav';

	public static function init($items = [], $pills = false, $fill = false) {
		$component = new static($items);
		foreach ($items as $key => $item) {
			$component->placeContent($key, $item);
		}

		if ($pills) {
			$component->pills();
		}

		if ($fill) {
			$component->fill();
		}

		return $component;
	}

	function __construct (array $items, string $active_item = '') {
		parent::__construct($items, Element::create('div')->addClass('nav-item'), $active_item);
	}

	public function appendLink($href, $text, ...$attributes) {
		$link = Anchor::build($href, $text, $attributes)->addClass(self::NAV_LINK);
		return $text-$this->appendItem($link);
	}

	public function appendItem(ElementInterface $item) {
		$item->addClass(self::NAV_ITEM);
		return parent::appendItem($item); // TODO: Change the autogenerated stub
	}


	public function addItem ($item, $active = false, $disabled = false) {
		if ($item instanceof Anchor) {
			$item->addClass("nav-link");
			if ($this->tag == "ul") {
				$item->wrap = new class extends Component { public $tag = 'li'; };
				$item->wrap->addClass("nav-item");
			} else {
				$item->addClass("nav-item");
			}
			$this->addContent($item);
		} elseif (is_subclass_of($item, "Component")) {
			if ($item->tag == "a") {
				$item->addClass("nav-link");
				if ($this->tag == "ul") {
					$item->wrap = new class extends Component { public $tag = 'li'; };
					$item->wrap->addClass("nav-item");
				} else {
					$this->addClass("nav-item");
				}
			} elseif ($item->tag == "li") {
				$this->tag = "ul";
				$item->addClass("nav-item");
			}
			// Add dropdown
			if ($active) $this->addClass("active");
			if ($disabled) $this->addClass("disabled");
			$this->addContent($item);
		} elseif (is_array($item)) {
			foreach ($item as $itm) {
				$this->addItem($itm);
			}
			return $this;
		} else {
			$this->addContent($item);
		}
		return $this;
	}

	public function vertical($s = false, $m = false, $l = false) {
		if ($s || $m || $l) {
			if ($s) $this->addClass("flex-sm-column");
			if ($m) $this->addClass("flex-md-column");
			if ($l) $this->addClass("flex-lg-column");
		} else {
			$this->addClass("flex-column");
		}
	}

	public function tabs($card = false) {
		$this->removeClass("nav-pills");
		$this->addClass("nav-tabs");
		if ($card) $this->addClass("card-header-tabs");
		return $this;
	}

	public function pills($card = false) {
		$this->removeClass("nav-tabs");
		$this->addClass("nav-pills");
		return $this;
	}
}

// Add javascript content manipulation support
?>
